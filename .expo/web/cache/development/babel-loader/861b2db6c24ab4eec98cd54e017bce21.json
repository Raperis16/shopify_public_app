{"ast":null,"code":"import { combineReducers } from 'redux';\nvar INITIAL_STATE = {\n  current: [],\n  possible: ['Alice', 'Bob', 'Sammy']\n};\n\nvar checkoutReducers = function checkoutReducers() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_PRODUCT':\n      var current = state.current,\n          possible = state.possible;\n      var addCheckoutProduct = possible.splice(action.payload, 1);\n      current.push(addCheckoutProduct);\n      var newState = {\n        current: current,\n        possible: possible\n      };\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  checkout: checkoutReducers\n});","map":{"version":3,"sources":["C:/Users/Edijs/Documents/GitHub/shopify-app-with-navigation/redux/CheckoutReducer.js"],"names":["combineReducers","INITIAL_STATE","current","possible","checkoutReducers","state","action","type","addCheckoutProduct","splice","payload","push","newState","checkout"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AAEA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,OAAO,EAAE,EADW;AAEpBC,EAAAA,QAAQ,EAAE,CACR,OADQ,EAER,KAFQ,EAGR,OAHQ;AAFU,CAAtB;;AASA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAmC;AAAA,MAAlCC,KAAkC,uEAA1BJ,aAA0B;AAAA,MAAXK,MAAW;;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,aAAL;AAAA,UAKIL,OALJ,GAOMG,KAPN,CAKIH,OALJ;AAAA,UAMIC,QANJ,GAOME,KAPN,CAMIF,QANJ;AAWE,UAAMK,kBAAkB,GAAGL,QAAQ,CAACM,MAAT,CAAgBH,MAAM,CAACI,OAAvB,EAAgC,CAAhC,CAA3B;AAGAR,MAAAA,OAAO,CAACS,IAAR,CAAaH,kBAAb;AAGA,UAAMI,QAAQ,GAAG;AAAEV,QAAAA,OAAO,EAAPA,OAAF;AAAWC,QAAAA,QAAQ,EAARA;AAAX,OAAjB;AAEA,aAAOS,QAAP;;AAEF;AACE,aAAOP,KAAP;AAvBJ;AAyBD,CA1BD;;AA4BA,eAAeL,eAAe,CAAC;AAC7Ba,EAAAA,QAAQ,EAAET;AADmB,CAAD,CAA9B","sourcesContent":["import { combineReducers } from 'redux';\r\n\r\nconst INITIAL_STATE = {\r\n  current: [],\r\n  possible: [\r\n    'Alice',\r\n    'Bob',\r\n    'Sammy',\r\n  ],\r\n};\r\n\r\nconst checkoutReducers = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_PRODUCT':\r\n      // Pulls current and possible out of previous state\r\n      // We do not want to alter state directly in case\r\n      // another action is altering it at the same time\r\n      const {\r\n        current,\r\n        possible,\r\n      } = state;\r\n\r\n      // Pull friend out of friends.possible\r\n      // Note that action.payload === friendIndex\r\n      const addCheckoutProduct = possible.splice(action.payload, 1);\r\n\r\n      // And put friend in friends.current\r\n      current.push(addCheckoutProduct);\r\n\r\n      // Finally, update the redux state\r\n      const newState = { current, possible };\r\n\r\n      return newState;\r\n\r\n    default:\r\n      return state\r\n  }\r\n};\r\n\r\nexport default combineReducers({\r\n  checkout: checkoutReducers\r\n});"]},"metadata":{},"sourceType":"module"}